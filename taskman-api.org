tid = name | task | task,nonce | -1 | none

tid ':main:' or 0 refers to the root task.

An omitted (or nil) tid refers to calling task.

A tid of -1 refers to the parent task.  Task 0 has no parent.

* Starting/Stopping
** initialize{params}

  params:

  task_limit: maximum number of tasks allowed.

  control_channel_size: size of housekeeper message queue

  main_queue_size: size of :main: message queue

** shutdown()
* Tasks
  create_task{task_specification, task arguments...} -> tid
  get_my_name() -> name, task, nonce
  lookup_task(tid) -> nil | task, nonce
  interrupt_task(hard, tid) -> task
  interrupt_all(hard) - except caller and main
  cancel_task(tid) -> task
  cancel_all() - except caller and main
  set_cancel(enable, deferred) -> old_enable, old_deferred
** task_specification
  | field        | mandatory | value     | use                       |
  |--------------+-----------+-----------+---------------------------|
  | program      | yes       | fn or str | program to run:           |
  |              |           |           | fn captures upvals,       |
  |              |           |           | ":file" for file,         |
  |              |           |           | otherwise code string     |
  | queue_size   | no        | int       | message queue size        |
  | task_name    | no        | str       | task id                   |
  | show_errors  | no        | bool      | display on stderr (async) |
  | show_exits   | no        | bool      | display on stderr (async) |
  | send_results | no        | bool      | send frozen child results |
  |              |           |           | as child exit message     |

  Indexed elements are passed as function arguments.
* Flags
  Private flags range from 0 to 30.
  change_private_flag(flag, state, tid)
  broadcast_private_flag(flag, state)
  private_flag(flag)
  get_private_word()
  change_global_flag(flag, state)
  global_flag(flag)
  get_global_flag_word()
  set_immunity(state[, tid])
* Timestamps
  Numsecs is a number of seconds as an IEEE754 double
  timestamp +/- numsecs -> timestamp
  timestamp - timestamp -> numsecs
  timestamp + timestamp -> (exact)
  -timestamp -> timestamp (exact)
  timestamp * integer -> timestamp (exact)
  #timestamp -> numsecs

  create_timestamp(numsecs) -> timestamp
  create_timestamp(seconds, nanoseconds) -> timestamp (exact)
  timestamp_parts(timestamp) -> seconds,nanoseconds (exact)
  now() -> timestamp (exact)
  sleep(numsecs or timestamp) -> numsecs (wake latency)
* Messages
** get_message() -> nil | message, type, { name, } task, nonce
   Nonce will be zero if the task slot is empty or reused since sending.
** wait_message(optional timeout) -> Same as with get_message.
   With no argument, wait indefinitely.
   Return of nil indicates a time out.
   Timeout may be a timestamp or number(floating) of seconds.
   Nonce value behaves as with get_message.
** send_message(message, tid)
** send_message_with_type(message, type, tid)
** broadcast_message(message, type, channel)
24 channels from 0 to 23.  Higher are reserver for system.
** set_reception(channel_mask)
** set_subscriptions(system_message_table)
*** Subscriptions
   child_task_exits
   any_task_exits
   new_named_tasks
   any_new_tasks
   create_failures
   any_results (subscribes to any_task_exits)
*** Messages types sent
    | task_create_failed | Housekeeper failed to launch task        |
    | task_created       |                                          |
    | task_exited        | Normal exit                              |
    | task_failed        | Soft interruption counts as failure      |
    | task_cancelled     | Hard interruption counts as cancellation |
* Scheduler (linux only)
** set_priority(priority[, policy])
*** Policy
    sched_rr
    sched_fifo
    sched_idle
    sched_batch
    sched_other
** set_affinity{cpu list}
* Status display (async)
  status(bool) -- Show task statuson stderr; true to list unnamed.
* Guaranteeing taskman shutdown at exit
  To be sure all tasks exit cleanly if the main task encounters a fault
  or exit in a non-interactive script, use the newproxy hack:

  taskman = setmetatable(require 'taskman', {__gc=newproxy(true)})
  getmetatable(getmetatable(taskman).__gc).__gc = taskman.shutdown

  This will do nothing if shutdown has already been called.
